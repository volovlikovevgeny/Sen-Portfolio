{"version":3,"sources":["App.jsx","serviceWorker.js","redux/contact/contact.types.js","redux/contact/contact.reducer.js","redux/root-reducer.js","redux/store.js","index.js"],"names":["Home","lazy","Navigation","About","Projects","Skills","Contacts","Footer","ScrollBtn","App","fallback","style","height","display","justifyContent","alignItems","fontSize","Boolean","window","location","hostname","match","contactActionTypes","CONTACT","INITIAL_STATE","contacts","id","head","subTitle","contactReducer","state","action","type","payload","combineReducers","contact","middleiddlewares","logger","store","createStore","rootReducer","applyMiddleware","AOS","init","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8NAKMA,G,YAAOC,gBAAK,kBAAM,kCAElBC,EAAaD,gBAAK,kBAAM,sDAExBE,EAAQF,gBAAK,kBAAM,gCACnBG,EAAWH,gBAAK,kBAAM,gCACtBI,EAASJ,gBAAK,kBAAM,gCACpBK,EAAWL,gBAAK,kBAAM,gCACtBM,EAASN,gBAAK,kBAAM,sDACpBO,EAAYP,gBAAK,kBAAM,uDAwBdQ,EArBH,kBACV,6BACE,kBAAC,WAAD,CAAUC,SAAU,yBAAKC,MAAO,CAC9BC,OAAQ,QACRC,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZC,SAAU,SALQ,YAOlB,kBAACd,EAAD,MACA,kBAACF,EAAD,MACA,kBAACG,EAAD,MACA,kBAACC,EAAD,MACA,kBAACC,EAAD,MACA,kBAACC,EAAD,MACA,kBAACC,EAAD,MACA,kBAACC,EAAD,SCrBcS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oDCdSC,EAJY,CACvBC,QAAS,WCCPC,EAAgB,CAClBC,SAAU,CACN,CACIC,GAAI,EACJC,KAAM,OACNC,SAAU,qBAEd,CACIF,GAAI,EACJC,KAAM,UACNC,SAAU,sBAEd,CACIF,GAAI,EACJC,KAAM,OACNC,SAAU,4BAiBPC,EAZQ,WAAoC,IAAnCC,EAAkC,uDAA1BN,EAAeO,EAAW,uCACtD,OAAQA,EAAOC,MACX,KAAMV,EAAmBC,QACrB,OAAO,eACAO,EADP,CAEIL,SAAUM,EAAOE,UAEzB,QACI,OAAOH,IC1BJI,cAAgB,CAC3BC,QAASN,ICAPO,EAAmB,CAACC,KAIXC,EAFDC,YAAYC,EAAaC,IAAe,WAAf,EAAmBL,I,uBCI1DM,IAAIC,OAEJC,IAASC,OACP,kBAAC,IAAD,CAAUP,MAAOA,GACf,kBAAC,IAAD,KACE,kBAAC,EAAD,QAIJQ,SAASC,eAAe,SL+GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e74072c4.chunk.js","sourcesContent":["import React, { lazy, Suspense } from 'react';\r\n\r\nimport './App.css';\r\n\r\n\r\nconst Home = lazy(() => import('./components/home/home.component'));\r\n\r\nconst Navigation = lazy(() => import('./components/navigation/navigation.component'));\r\n\r\nconst About = lazy(() => import('./components/about/about.component'));\r\nconst Projects = lazy(() => import('./components/projects/projects.component'));\r\nconst Skills = lazy(() => import('./components/skills/skills.component'));\r\nconst Contacts = lazy(() => import('./components/contact/contact.component'));\r\nconst Footer = lazy(() => import('./components/footer/footer.component'));\r\nconst ScrollBtn = lazy(() => import('./components/scroll-up-btn/scroll-up-btn'));\r\n\r\n\r\nconst App = () => (\r\n  <div>\r\n    <Suspense fallback={<div style={{\r\n      height: '100vh',\r\n      display: 'flex',\r\n      justifyContent: 'center',\r\n      alignItems: 'center',\r\n      fontSize: '2rem'\r\n    }}>Loading</div>}>\r\n      <Navigation />\r\n      <Home />\r\n      <About />\r\n      <Projects />\r\n      <Skills />\r\n      <Contacts />\r\n      <Footer />\r\n      <ScrollBtn />\r\n    </Suspense>\r\n  </div>\r\n)\r\n\r\nexport default App","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const contactActionTypes = {\r\n    CONTACT: 'CONTACT',\r\n}\r\n\r\nexport default contactActionTypes;","import contactActionTypes from './contact.types';\r\n\r\nconst INITIAL_STATE = {\r\n    contacts: [\r\n        {\r\n            id: 1,\r\n            head: 'Name',\r\n            subTitle: 'Volovlikov Evgeny',\r\n        },\r\n        {\r\n            id: 2,\r\n            head: 'Address',\r\n            subTitle: 'Prospect Lenina, 7',\r\n        },\r\n        {\r\n            id: 3,\r\n            head: 'Mail',\r\n            subTitle: 'Volovlikov97@gmail.com',\r\n        }\r\n    ]\r\n}\r\n\r\nconst contactReducer = (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case (contactActionTypes.CONTACT):\r\n            return {\r\n                ...state,\r\n                contacts: action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default contactReducer;","import { combineReducers } from 'redux';\r\n\r\nimport contactReducer from './contact/contact.reducer';\r\n\r\nexport default combineReducers({\r\n    contact: contactReducer,\r\n})","import { createStore, applyMiddleware } from 'redux';\r\nimport logger from 'redux-logger';\r\n\r\nimport rootReducer from './root-reducer';\r\n\r\nconst middleiddlewares = [logger];\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(...middleiddlewares));\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\nimport store from './redux/store';\r\nimport AOS from 'aos';\r\nimport 'aos/dist/aos.css';\r\n\r\nAOS.init()\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>\r\n  </Provider>\r\n  ,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}